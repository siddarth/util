#!/usr/bin/env ruby

raise "Usage: ruby wrap minimum_size = 40 [maximum_size = 80]" unless ARGV.length > 0

def to_int(x)
  begin
    Float(x).to_i
  rescue
    raise ArgumentError, "Sizes should be valid numbers"
  end
end

# sane defaults
min, max = to_int(ARGV[0]), ARGV[1]
max ||= 80
max = to_int(max)

original_text = STDIN.read

# Generate a naive score for any wrapped text. This is
# currently just the sum of the differences between the
# length of each line and the longest line in the text.
#
# Since we want to penalize large spaces at the end of a
# line more, we use the cube of the difference between the
# longest line in the text, and each line.
def score(text)
  text_array = text.split("\n")
  max_line_length = 0
  text_array.each { |l| max_line_length = l.length if l.length > max_line_length}
  score = 0
  text_array.each { |l|
    score += (max_line_length - l.length)**3
  }
  score
end

def justify(text)

  def get_line(words, num_extra_spaces)
    return words.join(" "), "\n" if num_extra_spaces == 0
    spaces = Array.new(words.length, 1)
    # TODO: distribute spaces more nicely.
    until num_extra_spaces == 0
      spaces.each_index do |i|
        break if num_extra_spaces == 0
        spaces[i] += 1
        num_extra_spaces -= 1
      end
    end
    res = ""
    words.each_index do |i|
      res += words[i]
      res += " "*spaces[i]
    end
    res + "\n"
  end

  # Get longest line, and justify the rest to that.
  max_line_length = 0
  text.split("\n").each { |l| max_line_length = l.length if l.length > max_line_length}

  # Justify.
  text.split("\n").each_with_index.map do |line, index|
    words = line.split(" ").map { |w| w.strip }
    num_spaces = max_line_length - line.strip.length

    if index == text.split("\n").length - 1
      words.join(" ") + "\n"
    else
      get_line(words, num_spaces)
    end
  end
end

# Given some text, and a size, wrap the text to that size.
# This doesn't do any clever justification, just skip to the
# next line.
#
# FIXME: greedy = stupid. dynamic programming goes here.
def wrap_text(text, size)
  text = text.split(" ")
  wrapped_text = ""
  current_line_size = 0
  text.each { |word|
    if (word.length + 1 + current_line_size > size)
      wrapped_text += "\n"
      wrapped_text += word
      current_line_size = word.length
    else
      wrapped_text += " " unless current_line_size == 0
      wrapped_text += "#{word}"
      current_line_size += word.length
    end
  }
  wrapped_text
end

min_score = 500000 # fixme: use max int
min_wrap = 0

original_paras = original_text.split("\n")

for i in min..max
  score = 0
  original_paras.each { |t|
    wrapped = wrap_text(t, i)
    score += score(wrapped)
    if (score < min_score)
      min_score = score
      min_wrap = i
    end
  }
end

print "\n"
puts "="*max
print "\n"
original_paras.each { |t| print justify(wrap_text(t, min_wrap)), "\n" }
puts "="*max